{
  "uid" : "73a4f1cb8be9d690",
  "name" : "Update user's avatar",
  "fullName" : "tests.test_avatars.TestAvatars#test_update_user_avatar",
  "historyId" : "adc8a76095bb3554fb51d924cb791563",
  "time" : {
    "start" : 1733339119149,
    "stop" : 1733339180502,
    "duration" : 61353
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Test failed with error: Response is not JSON. Status code: 503, Response text: upstream connect error or disconnect/reset before headers. reset reason: connection termination\n  request-id: 48365d3a-62f3-4604-921e-66677567ecb0\n  trace-id: 6daf57ba10a6cfe7:4bb1ea9d3695cd59:6daf57ba10a6cfe7:1\n  \nassert False",
  "statusTrace" : "self = <Response [503]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.10/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n../local/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f66a0e95c00>\ns = 'upstream connect error or disconnect/reset before headers. reset reason: connection termination\\nrequest-id: 48365d3a-62f3-4604-921e-66677567ecb0\\ntrace-id: 6daf57ba10a6cfe7:4bb1ea9d3695cd59:6daf57ba10a6cfe7:1\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.10/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <services.avatars.api_avatars.AvatarsAPI object at 0x7f669fa9e8f0>\nuser_uuid = 'ad58c295-8dc1-48c3-a98f-68a9ae36060e'\navatar_data = '/usr/workspace/services/users/avatar_file/cat.jpg'\n\n    @allure.step(\"Update user's avatar\")\n    def update_user_avatar(self, user_uuid, avatar_data):\n        # Проверяем существование файла\n        if not os.path.exists(avatar_data):\n            raise FileNotFoundError(f\"Avatar file not found: {avatar_data}\")\n    \n        url = self.endpoints.update_avatar(user_uuid)\n        print(f\"Request URL: {url}\")\n    \n        try:\n            # Открываем файл в бинарном режиме\n            with open(avatar_data, \"rb\") as file:\n                # Отправляем файл с ключом 'avatar_file', как указано в документации\n                files = {\"avatar_file\": file}  # Здесь мы отправляем файл с ключом 'avatar_file'\n                response = requests.put(\n                    url=url,\n                    headers=self.headers.basic_api_11,  # Убедитесь, что заголовки не содержат 'Content-Type'\n                    files=files\n                )\n    \n            # Логируем ответ\n            print(f\"Response status code: {response.status_code}\")\n            try:\n>               response_data = response.json()\n\nservices/avatars/api_avatars.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [503]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.10/site-packages/requests/models.py:978: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_avatars.TestAvatars object at 0x7f669fa9f250>\n\n    @pytest.mark.avatar\n    @allure.title(\"Update user's avatar\")\n    def test_update_user_avatar(self):\n        base_dir = os.path.dirname(os.path.abspath(__file__))  # Каталог текущего файла (теста)\n        avatar_data = os.path.join(base_dir, \"..\", \"services\", \"users\", \"avatar_file\", \"cat.jpg\")\n        avatar_data = os.path.abspath(avatar_data)  # Преобразуем в абсолютный путь\n    \n        # Проверяем существование файла\n        if not os.path.exists(avatar_data):\n            raise FileNotFoundError(f\"Avatar file not found: {avatar_data}\")\n    \n        user_uuid = self.api_users.get_user()\n        assert user_uuid, \"Failed to retrieve user UUID\"\n        print(f\"User UUID: {user_uuid}\")\n        print(f\"Avatar data: {avatar_data}\")\n    \n        try:\n            # Обновление аватара\n>           response = self.avatars_api.update_user_avatar(user_uuid, avatar_data)\n\ntests/test_avatars.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices/avatars/api_avatars.py:53: in update_user_avatar\n    raise e  # Пробрасываем исключение дальше\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.avatars.api_avatars.AvatarsAPI object at 0x7f669fa9e8f0>\nuser_uuid = 'ad58c295-8dc1-48c3-a98f-68a9ae36060e'\navatar_data = '/usr/workspace/services/users/avatar_file/cat.jpg'\n\n    @allure.step(\"Update user's avatar\")\n    def update_user_avatar(self, user_uuid, avatar_data):\n        # Проверяем существование файла\n        if not os.path.exists(avatar_data):\n            raise FileNotFoundError(f\"Avatar file not found: {avatar_data}\")\n    \n        url = self.endpoints.update_avatar(user_uuid)\n        print(f\"Request URL: {url}\")\n    \n        try:\n            # Открываем файл в бинарном режиме\n            with open(avatar_data, \"rb\") as file:\n                # Отправляем файл с ключом 'avatar_file', как указано в документации\n                files = {\"avatar_file\": file}  # Здесь мы отправляем файл с ключом 'avatar_file'\n                response = requests.put(\n                    url=url,\n                    headers=self.headers.basic_api_11,  # Убедитесь, что заголовки не содержат 'Content-Type'\n                    files=files\n                )\n    \n            # Логируем ответ\n            print(f\"Response status code: {response.status_code}\")\n            try:\n                response_data = response.json()\n                print(f\"Response body: {response_data}\")\n            except ValueError:\n                print(f\"Failed to decode JSON. Response text: {response.text}\")\n>               assert False, f\"Response is not JSON. Status code: {response.status_code}, Response text: {response.text}\"\nE               AssertionError: Response is not JSON. Status code: 503, Response text: upstream connect error or disconnect/reset before headers. reset reason: connection termination\nE               request-id: 48365d3a-62f3-4604-921e-66677567ecb0\nE               trace-id: 6daf57ba10a6cfe7:4bb1ea9d3695cd59:6daf57ba10a6cfe7:1\n\nservices/avatars/api_avatars.py:46: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_avatars.TestAvatars object at 0x7f669fa9f250>\n\n    @pytest.mark.avatar\n    @allure.title(\"Update user's avatar\")\n    def test_update_user_avatar(self):\n        base_dir = os.path.dirname(os.path.abspath(__file__))  # Каталог текущего файла (теста)\n        avatar_data = os.path.join(base_dir, \"..\", \"services\", \"users\", \"avatar_file\", \"cat.jpg\")\n        avatar_data = os.path.abspath(avatar_data)  # Преобразуем в абсолютный путь\n    \n        # Проверяем существование файла\n        if not os.path.exists(avatar_data):\n            raise FileNotFoundError(f\"Avatar file not found: {avatar_data}\")\n    \n        user_uuid = self.api_users.get_user()\n        assert user_uuid, \"Failed to retrieve user UUID\"\n        print(f\"User UUID: {user_uuid}\")\n        print(f\"Avatar data: {avatar_data}\")\n    \n        try:\n            # Обновление аватара\n            response = self.avatars_api.update_user_avatar(user_uuid, avatar_data)\n    \n            # Проверяем, что в ответе есть 'avatar_url', что подтверждает успешное обновление\n            assert \"avatar_url\" in response, f\"Avatar update failed. Response: {response}\"\n            print(f\"Avatar updated successfully for user {user_uuid}. Avatar URL: {response['avatar_url']}\")\n    \n        except Exception as e:\n            print(f\"Test failed with error: {e}\")\n>           assert False, f\"Test failed with error: {e}\"\nE           AssertionError: Test failed with error: Response is not JSON. Status code: 503, Response text: upstream connect error or disconnect/reset before headers. reset reason: connection termination\nE             request-id: 48365d3a-62f3-4604-921e-66677567ecb0\nE             trace-id: 6daf57ba10a6cfe7:4bb1ea9d3695cd59:6daf57ba10a6cfe7:1\nE             \nE           assert False\n\ntests/test_avatars.py:39: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1733339116840,
      "stop" : 1733339116841,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_xunit_setup_method_fixture_TestAvatars",
    "time" : {
      "start" : 1733339119148,
      "stop" : 1733339119148,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "init_environment",
    "time" : {
      "start" : 1733339116841,
      "stop" : 1733339119148,
      "duration" : 2307
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Test failed with error: Response is not JSON. Status code: 503, Response text: upstream connect error or disconnect/reset before headers. reset reason: connection termination\n  request-id: 48365d3a-62f3-4604-921e-66677567ecb0\n  trace-id: 6daf57ba10a6cfe7:4bb1ea9d3695cd59:6daf57ba10a6cfe7:1\n  \nassert False",
    "statusTrace" : "self = <Response [503]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.10/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n../local/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f66a0e95c00>\ns = 'upstream connect error or disconnect/reset before headers. reset reason: connection termination\\nrequest-id: 48365d3a-62f3-4604-921e-66677567ecb0\\ntrace-id: 6daf57ba10a6cfe7:4bb1ea9d3695cd59:6daf57ba10a6cfe7:1\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.10/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <services.avatars.api_avatars.AvatarsAPI object at 0x7f669fa9e8f0>\nuser_uuid = 'ad58c295-8dc1-48c3-a98f-68a9ae36060e'\navatar_data = '/usr/workspace/services/users/avatar_file/cat.jpg'\n\n    @allure.step(\"Update user's avatar\")\n    def update_user_avatar(self, user_uuid, avatar_data):\n        # Проверяем существование файла\n        if not os.path.exists(avatar_data):\n            raise FileNotFoundError(f\"Avatar file not found: {avatar_data}\")\n    \n        url = self.endpoints.update_avatar(user_uuid)\n        print(f\"Request URL: {url}\")\n    \n        try:\n            # Открываем файл в бинарном режиме\n            with open(avatar_data, \"rb\") as file:\n                # Отправляем файл с ключом 'avatar_file', как указано в документации\n                files = {\"avatar_file\": file}  # Здесь мы отправляем файл с ключом 'avatar_file'\n                response = requests.put(\n                    url=url,\n                    headers=self.headers.basic_api_11,  # Убедитесь, что заголовки не содержат 'Content-Type'\n                    files=files\n                )\n    \n            # Логируем ответ\n            print(f\"Response status code: {response.status_code}\")\n            try:\n>               response_data = response.json()\n\nservices/avatars/api_avatars.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [503]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.10/site-packages/requests/models.py:978: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_avatars.TestAvatars object at 0x7f669fa9f250>\n\n    @pytest.mark.avatar\n    @allure.title(\"Update user's avatar\")\n    def test_update_user_avatar(self):\n        base_dir = os.path.dirname(os.path.abspath(__file__))  # Каталог текущего файла (теста)\n        avatar_data = os.path.join(base_dir, \"..\", \"services\", \"users\", \"avatar_file\", \"cat.jpg\")\n        avatar_data = os.path.abspath(avatar_data)  # Преобразуем в абсолютный путь\n    \n        # Проверяем существование файла\n        if not os.path.exists(avatar_data):\n            raise FileNotFoundError(f\"Avatar file not found: {avatar_data}\")\n    \n        user_uuid = self.api_users.get_user()\n        assert user_uuid, \"Failed to retrieve user UUID\"\n        print(f\"User UUID: {user_uuid}\")\n        print(f\"Avatar data: {avatar_data}\")\n    \n        try:\n            # Обновление аватара\n>           response = self.avatars_api.update_user_avatar(user_uuid, avatar_data)\n\ntests/test_avatars.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nservices/avatars/api_avatars.py:53: in update_user_avatar\n    raise e  # Пробрасываем исключение дальше\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <services.avatars.api_avatars.AvatarsAPI object at 0x7f669fa9e8f0>\nuser_uuid = 'ad58c295-8dc1-48c3-a98f-68a9ae36060e'\navatar_data = '/usr/workspace/services/users/avatar_file/cat.jpg'\n\n    @allure.step(\"Update user's avatar\")\n    def update_user_avatar(self, user_uuid, avatar_data):\n        # Проверяем существование файла\n        if not os.path.exists(avatar_data):\n            raise FileNotFoundError(f\"Avatar file not found: {avatar_data}\")\n    \n        url = self.endpoints.update_avatar(user_uuid)\n        print(f\"Request URL: {url}\")\n    \n        try:\n            # Открываем файл в бинарном режиме\n            with open(avatar_data, \"rb\") as file:\n                # Отправляем файл с ключом 'avatar_file', как указано в документации\n                files = {\"avatar_file\": file}  # Здесь мы отправляем файл с ключом 'avatar_file'\n                response = requests.put(\n                    url=url,\n                    headers=self.headers.basic_api_11,  # Убедитесь, что заголовки не содержат 'Content-Type'\n                    files=files\n                )\n    \n            # Логируем ответ\n            print(f\"Response status code: {response.status_code}\")\n            try:\n                response_data = response.json()\n                print(f\"Response body: {response_data}\")\n            except ValueError:\n                print(f\"Failed to decode JSON. Response text: {response.text}\")\n>               assert False, f\"Response is not JSON. Status code: {response.status_code}, Response text: {response.text}\"\nE               AssertionError: Response is not JSON. Status code: 503, Response text: upstream connect error or disconnect/reset before headers. reset reason: connection termination\nE               request-id: 48365d3a-62f3-4604-921e-66677567ecb0\nE               trace-id: 6daf57ba10a6cfe7:4bb1ea9d3695cd59:6daf57ba10a6cfe7:1\n\nservices/avatars/api_avatars.py:46: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_avatars.TestAvatars object at 0x7f669fa9f250>\n\n    @pytest.mark.avatar\n    @allure.title(\"Update user's avatar\")\n    def test_update_user_avatar(self):\n        base_dir = os.path.dirname(os.path.abspath(__file__))  # Каталог текущего файла (теста)\n        avatar_data = os.path.join(base_dir, \"..\", \"services\", \"users\", \"avatar_file\", \"cat.jpg\")\n        avatar_data = os.path.abspath(avatar_data)  # Преобразуем в абсолютный путь\n    \n        # Проверяем существование файла\n        if not os.path.exists(avatar_data):\n            raise FileNotFoundError(f\"Avatar file not found: {avatar_data}\")\n    \n        user_uuid = self.api_users.get_user()\n        assert user_uuid, \"Failed to retrieve user UUID\"\n        print(f\"User UUID: {user_uuid}\")\n        print(f\"Avatar data: {avatar_data}\")\n    \n        try:\n            # Обновление аватара\n            response = self.avatars_api.update_user_avatar(user_uuid, avatar_data)\n    \n            # Проверяем, что в ответе есть 'avatar_url', что подтверждает успешное обновление\n            assert \"avatar_url\" in response, f\"Avatar update failed. Response: {response}\"\n            print(f\"Avatar updated successfully for user {user_uuid}. Avatar URL: {response['avatar_url']}\")\n    \n        except Exception as e:\n            print(f\"Test failed with error: {e}\")\n>           assert False, f\"Test failed with error: {e}\"\nE           AssertionError: Test failed with error: Response is not JSON. Status code: 503, Response text: upstream connect error or disconnect/reset before headers. reset reason: connection termination\nE             request-id: 48365d3a-62f3-4604-921e-66677567ecb0\nE             trace-id: 6daf57ba10a6cfe7:4bb1ea9d3695cd59:6daf57ba10a6cfe7:1\nE             \nE           assert False\n\ntests/test_avatars.py:39: AssertionError",
    "steps" : [ {
      "name" : "Get user",
      "time" : {
        "start" : 1733339119149,
        "stop" : 1733339119934,
        "duration" : 785
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d958e1011f2fd412",
        "name" : "API Response",
        "source" : "d958e1011f2fd412.json",
        "type" : "application/json",
        "size" : 2169
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Update user's avatar",
      "time" : {
        "start" : 1733339119934,
        "stop" : 1733339180501,
        "duration" : 60567
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Response is not JSON. Status code: 503, Response text: upstream connect error or disconnect/reset before headers. reset reason: connection termination\nrequest-id: 48365d3a-62f3-4604-921e-66677567ecb0\ntrace-id: 6daf57ba10a6cfe7:4bb1ea9d3695cd59:6daf57ba10a6cfe7:1\n\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/workspace/services/avatars/api_avatars.py\", line 53, in update_user_avatar\n    raise e  # Пробрасываем исключение дальше\n  File \"/usr/workspace/services/avatars/api_avatars.py\", line 46, in update_user_avatar\n    assert False, f\"Response is not JSON. Status code: {response.status_code}, Response text: {response.text}\"\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "user_uuid",
        "value" : "'ad58c295-8dc1-48c3-a98f-68a9ae36060e'"
      }, {
        "name" : "avatar_data",
        "value" : "'/usr/workspace/services/users/avatar_file/cat.jpg'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_xunit_setup_method_fixture_TestAvatars::0",
    "time" : {
      "start" : 1733339180584,
      "stop" : 1733339180584,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Avatars"
  }, {
    "name" : "epic",
    "value" : "Users Avatars"
  }, {
    "name" : "tag",
    "value" : "avatar"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_avatars"
  }, {
    "name" : "subSuite",
    "value" : "TestAvatars"
  }, {
    "name" : "host",
    "value" : "b2625326f9b8"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_avatars"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 6,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 8
      },
      "items" : [ {
        "uid" : "159193eb0f2046a7",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1733300323967,
          "stop" : 1733300325797,
          "duration" : 1830
        }
      }, {
        "uid" : "47edc9679fb5f711",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1733300089606,
          "stop" : 1733300092169,
          "duration" : 2563
        }
      }, {
        "uid" : "f47f196401d0c563",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1733299715367,
          "stop" : 1733299717399,
          "duration" : 2032
        }
      }, {
        "uid" : "c16f98b47e6c8f35",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert 401 == 205\n +  where 401 = <Response [401]>.status_code",
        "time" : {
          "start" : 1733298975951,
          "stop" : 1733298975951,
          "duration" : 0
        }
      }, {
        "uid" : "f0254b4f26aedaa",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1733298073628,
          "stop" : 1733298075944,
          "duration" : 2316
        }
      }, {
        "uid" : "c30da46114d0d170",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1733297610223,
          "stop" : 1733297612421,
          "duration" : 2198
        }
      }, {
        "uid" : "db4883b8b8bbc00",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1733296867491,
          "stop" : 1733296869886,
          "duration" : 2395
        }
      } ]
    },
    "tags" : [ "avatar" ]
  },
  "source" : "73a4f1cb8be9d690.json",
  "parameterValues" : [ ]
}